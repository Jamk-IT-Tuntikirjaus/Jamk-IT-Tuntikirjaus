{"version":3,"file":"builtin_codegens.js","sourceRoot":"","sources":["../../src/builtin_codegens.ts"],"names":[],"mappings":";AAGA,0BAA0B,IAAY,EAAE,MAAc;IACpD,MAAM,CAAC,YAAY,GAAG,IAAI,GAAG,QAAQ,GAAG,MAAM,GAAG,KAAK,CAAC;AACzD,CAAC;AAEY,mBAAW,GACtB,UAAC,IAAY,EAAE,MAAc,IAAK,OAAA,0BAAuB,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAE,EAAvD,CAAuD,CAAC;AAE/E,qBAAa,GAAkB,UAAC,IAAY,EAAE,MAAc,EAC5B,aAAkC,EAClC,eAAqC;IAChF,IAAM,aAAa,GAAG,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACrD,IAAM,gBAAgB,GAAG,eAAe,CAAC,SAAS,GAAG,QAAM,eAAe,CAAC,SAAS,MAAG,GAAG,EAAE,CAAC;IAE7F,IAAM,MAAM,GAAG;QACb,sDAAsD;QACtD,yDAAyD;QACzD,kBAAe,aAAa,QAAI;QAChC,SAAM,gBAAgB,QAAI;QAC1B,IAAI;KACL,CAAC;IAEF,MAAM,CAAC,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpE,CAAC,CAAC;AAEW,qBAAa,GAAkB,UAAC,IAAY,EAAE,MAAc,EAAE,IAAyB;IAClG,IAAM,MAAM,GAAG;QACb,yCAAsC,IAAI,QAAI;QAC9C,wCAAqC,MAAM,UAAM;KAClD,CAAC;IAEF,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3D,CAAC,CAAC;AAEW,yBAAiB,GAAoD;IAChF,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,mBAAW,EAAE;IACtC,EAAE,IAAI,EAAE,eAAe,EAAE,OAAO,EAAE,qBAAa,EAAE;IACjD,EAAE,IAAI,EAAE,cAAc,EAAE,OAAO,EAAE,qBAAa,EAAE;CACjD,CAAC","sourcesContent":["import { LoaderCodeGen } from './Loader';\nimport { RouterLoaderOptions, RouteResourceOptions } from './options';\n\nfunction getRequireString(file: string, module: string): string {\n  return 'require(\\'' + file + '\\')[\\'' + module + '\\']';\n}\n\nexport const syncCodeGen: LoaderCodeGen =\n  (file: string, module: string) => `loadChildren: () => ${getRequireString(file, module)}`;\n\nexport const ensureCodeGen: LoaderCodeGen = (file: string, module: string,\n                                             loaderOptions: RouterLoaderOptions,\n                                             resourceOptions: RouteResourceOptions) => {\n  const requireString = getRequireString(file, module);\n  const webpackChunkName = resourceOptions.chunkName ? `, '${resourceOptions.chunkName}'` : '';\n\n  const result = [\n    `loadChildren: () => new Promise(function (resolve) {`,\n    `  (require as any).ensure([], function (require: any) {`,\n    `    resolve(${requireString});`,\n    `  }${webpackChunkName});`,\n    `})`\n  ];\n\n  return loaderOptions.inline ? result.join('') : result.join('\\n');\n};\n\nexport const systemCodeGen: LoaderCodeGen = (file: string, module: string, opts: RouterLoaderOptions) => {\n  const result = [\n    `loadChildren: () => System.import('${file}')`,\n    `  .then( (module: any) => module['${module}'] )`\n  ];\n\n  return opts.inline ? result.join('') : result.join('\\n');\n};\n\nexport const BUILT_IN_CODEGENS: Array<{ name: string, codeGen: LoaderCodeGen }> = [\n  { name: 'sync', codeGen: syncCodeGen },\n  { name: 'async-require', codeGen: ensureCodeGen },\n  { name: 'async-system', codeGen: systemCodeGen }\n];\n"]}